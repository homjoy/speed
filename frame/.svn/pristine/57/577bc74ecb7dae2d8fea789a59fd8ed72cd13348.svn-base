<?php

namespace Frame\Speed\Middleware;

use Frame\Speed\Exception\AuthException;

/**
 * 认证检查
 * Class AuthCheck
 * @package Frame\Speed\Middleware
 */
class WorkflowApiAuthCheck extends \Frame\Middleware
{
    /**
     * @var array
     */
    protected $settings = array();

    public function __construct($settings = array())
    {
        $this->settings['exclude'] = !isset($settings['exclude']) ? array()
            : (is_array($settings['exclude']) ? $settings['exclude'] : array($settings['exclude']));
    }

    /**
     * 认证检查
     */
    public function call()
    {
        try {
            //请求的接口
            $path = $this->app->request->path;
            //如果不需要认证
            if (in_array($path, $this->settings['exclude'])) {
                $this->next->call();
                return;
            }

            //检测登陆
            if(isset($this->app->request->POST['speed_token']) && !empty($this->app->request->POST['speed_token'])){
                $speedToken = trim($this->app->request->POST['speed_token']);
				
				if (strlen($speedToken) !== 32) {
					throw new AuthException('token不正确.');
				}
				$speedUserInfo = \Libs\Cache\Memcache::instance()->get($speedToken);
				if (empty($speedUserInfo) || !isset($speedUserInfo['user_id']) || empty($speedUserInfo['user_id'])) {
					throw new AuthException('登陆信息已失效，请重新登陆.');
				}
				
				$userInfo = array(
					'id'		=> $speedUserInfo['user_id'],
					'depart_id'	=> $speedUserInfo['depart_id'],
					'name'		=> $speedUserInfo['name_cn'],
					'mail'		=> $speedUserInfo['mail_full'],
				);
            }elseif(isset($this->app->request->POST['open_token']) && !empty($this->app->request->POST['open_token'])){
                $openToken = trim($this->app->request->POST['open_token']);
				$openAppKey = trim($this->app->request->POST['app_key']);
				
				$curl_obj = new \Libs\Sphinx\curl;
				$res = $curl_obj->post(OPEN_API . 'oauth/statuses',array(
					'client_id'		=> $openAppKey,
					'access_token'	=>$openToken
				));
				
				if(isset($res['body'])){
					$openUserInfo = json_decode($res['body'],true);
					if(empty($openUserInfo)) {
						throw new AuthException('用户信息解析失败');
					}elseif(200 != $openUserInfo['code']) {
						throw new AuthException($openUserInfo['message']);
					}
					
					$userInfo = array(
						'id'		=> intval($openUserInfo['data']['id']),
						'depart_id'	=> intval($openUserInfo['data']['departid']),
						'name'		=> $openUserInfo['data']['name'],
						'mail'		=> $openUserInfo['data']['mail'],
					);
				}else {
					throw new AuthException('获取不到用户信息');
				}
            }else{
                throw new AuthException('未登录!');
            }
			
            //保存登陆信息
            $this->app->currentUser = $userInfo;
            //认证通过之后才能继续调用module 之类的代码
            $this->next->call();
        } catch (AuthException $e) {
            $response = array();
            //http code 401 表示未授权
            $response['code'] = 401;
            $response['error_code'] = $e->getCode();
            $response['error_msg'] = $e->getMessage();

            $this->app->response->setBody($response, true);
        }
    }

}
