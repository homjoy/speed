<?php
namespace Frame\Speed\Lib;

/**
 * Class Api
 * @package Frame\Speed\Lib
 */
class Api
{

    /**
     * @var \Libs\Serviceclient\Client
     */
    private static $client = null;

    /**
     * client 单例方法.
     * @return \Libs\Serviceclient\Client
     */
    private static function createClient()
    {
        if (is_null(static::$client)) {
            \Libs\Serviceclient\ClientHeaderCreator::setInfos(array('user_id' => 0, 'ip' => '127.0.0.1'));
            static::$client = new \Libs\Serviceclient\Client();
        }

        return static::$client;
    }

    /**
     * atom接口调用
     * @param string $api
     * @param array $params
     * @param boolean $rawOutput 获取接口原始数据
     * @return mixed
     * @throws \Exception
     */
    public static function atom($api, array $params, $rawOutput = false)
    {
        $client = static::createClient();
        $response = $client->call('atom', $api, $params);//var_dump($api,$params,$response);die();
        if ($response['httpcode'] !== 200 || !isset($response['content']) || empty($response['content'])) {
            //记录日志？使用缓存记录请求次数？防止接口挂了的时候无限请求？
            throw new \Frame\Speed\Exception\ApiException($response, "请求接口{$api}出错！");
        }

        if ($rawOutput) {
            return $response['content'];
        }

        //接口正常返回，但是
        if ($response['content']['code'] == 400) {
            return array();
        }
        if ($response['content']['code'] != 200) {
            throw new \Frame\Speed\Exception\ApiException($response['content'], "{$api}接口异常,请检查.");
        }

        return $response['content']['data'];
    }

    /**
     * WORKER接口调用.
     * @param string $api
     * @param array $params
     * @param boolean $rawOutput 获取接口原始数据
     * @return array
     * @throws \Frame\Speed\Exception\ApiException
     */
    public static function worker($api, array $params, $rawOutput = false)
    {
        $client = static::createClient();
        $response = $client->call('worker', $api, $params);
        if ($response['httpcode'] !== 200 || !isset($response['content']) || empty($response['content'])) {
            //记录日志？使用缓存记录请求次数？防止接口挂了的时候无限请求？
            throw new \Frame\Speed\Exception\ApiException($response, "请求接口{$api}出错！");
        }

        if ($rawOutput) {
            return $response['content'];
        }

        //接口正常返回，但是
        if ($response['content']['code'] == 400) {
            return array();
        }
        if ($response['content']['code'] != 200) {
            throw new \Frame\Speed\Exception\ApiException($response['content'], "{$api}接口异常,请检查.");
        }

        return $response['content']['data'];
    }

    /**
     * WORKFLOW接口调用.
     * @param string $api
     * @param array $params
     * @param boolean $rawOutput 获取接口原始数据
     * @return array
     * @throws \Frame\Speed\Exception\ApiException
     */
    public static function workflow($api, array $params, $rawOutput = false)
    {
        $client = static::createClient();
        $response = $client->call('workflowapi', $api, $params);
        if ($response['httpcode'] !== 200 || !isset($response['content']) || empty($response['content'])) {
            //记录日志？使用缓存记录请求次数？防止接口挂了的时候无限请求？
            throw new \Frame\Speed\Exception\ApiException($response, "请求接口{$api}出错！");
        }

        if ($rawOutput) {
            return $response['content'];
        }

        if ($response['content']['code'] != 200) {
            $content = json_encode($response['content']);
            throw new \Frame\Speed\Exception\ApiException($response['content'], "{$api}接口异常,请检查.".$content);
        }

        return $response['content']['data'];
    }

    /**
     * JOINT接口调用.
     * @param string $api
     * @param array $params
     * @param boolean $rawOutput 获取接口原始数据
     * @return array
     * @throws \Frame\Speed\Exception\ApiException
     */
    public static function joint($api, array $params, $rawOutput = false)
    {
        $client = static::createClient();//var_dump($api, $params);exit;
        $response = $client->call('joint', $api, $params);//var_dump($response);exit;
        if ($response['httpcode'] !== 200 || !isset($response['content']) || empty($response['content'])) {
            //记录日志？使用缓存记录请求次数？防止接口挂了的时候无限请求？
            throw new \Frame\Speed\Exception\ApiException($response, "请求接口{$api}出错！");
        }

        if ($rawOutput) {
            return $response['content'];
        }

        if ($response['content']['code'] != 200) {
            $content = json_encode($response['content']);
            throw new \Frame\Speed\Exception\ApiException($response['content'], "{$api}接口异常,请检查.".$content);
        }

        return $response['content']['data'];
    }
}
