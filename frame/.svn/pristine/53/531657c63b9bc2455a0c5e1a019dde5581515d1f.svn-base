<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

namespace Libs\Thrift\Packages;

use \Libs\Thrift\TType;
include_once $GLOBALS['THRIFT_ROOT_LIB'].'/packages/anyval/anyval_types.php';

$GLOBALS['E_FilterOpcode'] = array(
  'FILTER_OP_EQ' => 1,
  'FILTER_OP_NE' => 2,
  'FILTER_OP_GT' => 3,
  'FILTER_OP_GE' => 4,
  'FILTER_OP_LT' => 5,
  'FILTER_OP_LE' => 6,
  'FILTER_OP_IN' => 7,
);

final class FilterOpcode {
  const FILTER_OP_EQ = 1;
  const FILTER_OP_NE = 2;
  const FILTER_OP_GT = 3;
  const FILTER_OP_GE = 4;
  const FILTER_OP_LT = 5;
  const FILTER_OP_LE = 6;
  const FILTER_OP_IN = 7;
  static public $__names = array(
    1 => 'FILTER_OP_EQ',
    2 => 'FILTER_OP_NE',
    3 => 'FILTER_OP_GT',
    4 => 'FILTER_OP_GE',
    5 => 'FILTER_OP_LT',
    6 => 'FILTER_OP_LE',
    7 => 'FILTER_OP_IN',
  );
}

class BoolOperation {
  static $_TSPEC;

  public $column_name_ = null;
  public $opcode_ = null;
  public $val_ = null;
  public $in_vals_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'column_name_',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'opcode_',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'val_',
          'type' => TType::STRUCT,
          'class' => 'AnyVal',
          ),
        4 => array(
          'var' => 'in_vals_',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'AnyVal',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['column_name_'])) {
        $this->column_name_ = $vals['column_name_'];
      }
      if (isset($vals['opcode_'])) {
        $this->opcode_ = $vals['opcode_'];
      }
      if (isset($vals['val_'])) {
        $this->val_ = $vals['val_'];
      }
      if (isset($vals['in_vals_'])) {
        $this->in_vals_ = $vals['in_vals_'];
      }
    }
  }

  public function getName() {
    return 'BoolOperation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->column_name_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->opcode_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->val_ = new AnyVal();
            $xfer += $this->val_->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->in_vals_ = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new AnyVal();
              $xfer += $elem5->read($input);
              $this->in_vals_ []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoolOperation');
    if ($this->column_name_ !== null) {
      $xfer += $output->writeFieldBegin('column_name_', TType::STRING, 1);
      $xfer += $output->writeString($this->column_name_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opcode_ !== null) {
      $xfer += $output->writeFieldBegin('opcode_', TType::I32, 2);
      $xfer += $output->writeI32($this->opcode_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->val_ !== null) {
      if (!is_object($this->val_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('val_', TType::STRUCT, 3);
      $xfer += $this->val_->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->in_vals_ !== null) {
      if (!is_array($this->in_vals_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('in_vals_', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->in_vals_));
        {
          foreach ($this->in_vals_ as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}
