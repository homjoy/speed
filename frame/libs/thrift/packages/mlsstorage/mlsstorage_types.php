<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

namespace Libs\Thrift\Packages;

use \Libs\Thrift\TType;

include_once $GLOBALS['THRIFT_ROOT_LIB'].'/Thrift.php';
include_once $GLOBALS['THRIFT_ROOT_LIB'].'/packages/anyval/anyval_types.php';
include_once $GLOBALS['THRIFT_ROOT_LIB'].'/packages/common/common_types.php';


class RowSingle {
  static $_TSPEC;

  public $column_values_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'column_values_',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Libs\Thrift\Packages\AnyVal',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['column_values_'])) {
        $this->column_values_ = $vals['column_values_'];
      }
    }
  }

  public function getName() {
    return 'RowSingle';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->column_values_ = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new AnyVal();
              $xfer += $elem5->read($input);
              $this->column_values_ []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RowSingle');
    if ($this->column_values_ !== null) {
      if (!is_array($this->column_values_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('column_values_', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->column_values_));
        {
          foreach ($this->column_values_ as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UniqRowKeyValue {
  static $_TSPEC;

  public $key_ = null;
  public $value_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key_',
          'type' => TType::STRUCT,
          'class' => 'Libs\Thrift\Packages\AnyVal',
          ),
        2 => array(
          'var' => 'value_',
          'type' => TType::STRUCT,
          'class' => 'Libs\Thrift\Packages\RowSingle',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key_'])) {
        $this->key_ = $vals['key_'];
      }
      if (isset($vals['value_'])) {
        $this->value_ = $vals['value_'];
      }
    }
  }

  public function getName() {
    return 'UniqRowKeyValue';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->key_ = new AnyVal();
            $xfer += $this->key_->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value_ = new RowSingle();
            $xfer += $this->value_->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UniqRowKeyValue');
    if ($this->key_ !== null) {
      if (!is_object($this->key_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('key_', TType::STRUCT, 1);
      $xfer += $this->key_->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value_ !== null) {
      if (!is_object($this->value_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value_', TType::STRUCT, 2);
      $xfer += $this->value_->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UniqRowGetUniqResp {
  static $_TSPEC;

  public $result_ = null;
  public $selected_columns_ = null;
  public $item_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'selected_columns_',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'item_',
          'type' => TType::STRUCT,
          'class' => 'Libs\Thrift\Packages\UniqRowKeyValue',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result_'])) {
        $this->result_ = $vals['result_'];
      }
      if (isset($vals['selected_columns_'])) {
        $this->selected_columns_ = $vals['selected_columns_'];
      }
      if (isset($vals['item_'])) {
        $this->item_ = $vals['item_'];
      }
    }
  }

  public function getName() {
    return 'UniqRowGetUniqResp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->result_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->selected_columns_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->item_ = new UniqRowKeyValue();
            $xfer += $this->item_->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UniqRowGetUniqResp');
    if ($this->result_ !== null) {
      $xfer += $output->writeFieldBegin('result_', TType::I32, 1);
      $xfer += $output->writeI32($this->result_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->selected_columns_ !== null) {
      $xfer += $output->writeFieldBegin('selected_columns_', TType::STRING, 2);
      $xfer += $output->writeString($this->selected_columns_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item_ !== null) {
      if (!is_object($this->item_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item_', TType::STRUCT, 3);
      $xfer += $this->item_->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UniqRowGetMultiResp {
  static $_TSPEC;

  public $result_ = null;
  public $selected_columns_ = null;
  public $items_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'selected_columns_',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'items_',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Libs\Thrift\Packages\UniqRowKeyValue',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result_'])) {
        $this->result_ = $vals['result_'];
      }
      if (isset($vals['selected_columns_'])) {
        $this->selected_columns_ = $vals['selected_columns_'];
      }
      if (isset($vals['items_'])) {
        $this->items_ = $vals['items_'];
      }
    }
  }

  public function getName() {
    return 'UniqRowGetMultiResp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->result_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->selected_columns_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->items_ = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new UniqRowKeyValue();
              $xfer += $elem12->read($input);
              $this->items_ []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UniqRowGetMultiResp');
    if ($this->result_ !== null) {
      $xfer += $output->writeFieldBegin('result_', TType::I32, 1);
      $xfer += $output->writeI32($this->result_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->selected_columns_ !== null) {
      $xfer += $output->writeFieldBegin('selected_columns_', TType::STRING, 2);
      $xfer += $output->writeString($this->selected_columns_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->items_ !== null) {
      if (!is_array($this->items_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items_', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items_));
        {
          foreach ($this->items_ as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MultiRowKeyValue {
  static $_TSPEC;

  public $key_ = null;
  public $values_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key_',
          'type' => TType::STRUCT,
          'class' => 'Libs\Thrift\Packages\AnyVal',
          ),
        2 => array(
          'var' => 'values_',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Libs\Thrift\Packages\RowSingle',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key_'])) {
        $this->key_ = $vals['key_'];
      }
      if (isset($vals['values_'])) {
        $this->values_ = $vals['values_'];
      }
    }
  }

  public function getName() {
    return 'MultiRowKeyValue';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->key_ = new AnyVal();
            $xfer += $this->key_->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->values_ = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new RowSingle();
              $xfer += $elem19->read($input);
              $this->values_ []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MultiRowKeyValue');
    if ($this->key_ !== null) {
      if (!is_object($this->key_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('key_', TType::STRUCT, 1);
      $xfer += $this->key_->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values_ !== null) {
      if (!is_array($this->values_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values_', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values_));
        {
          foreach ($this->values_ as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MultiRowGetUniqResp {
  static $_TSPEC;

  public $result_ = null;
  public $selected_columns_ = null;
  public $item_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'selected_columns_',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'item_',
          'type' => TType::STRUCT,
          'class' => 'Libs\Thrift\Packages\MultiRowKeyValue',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result_'])) {
        $this->result_ = $vals['result_'];
      }
      if (isset($vals['selected_columns_'])) {
        $this->selected_columns_ = $vals['selected_columns_'];
      }
      if (isset($vals['item_'])) {
        $this->item_ = $vals['item_'];
      }
    }
  }

  public function getName() {
    return 'MultiRowGetUniqResp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->result_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->selected_columns_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->item_ = new MultiRowKeyValue();
            $xfer += $this->item_->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MultiRowGetUniqResp');
    if ($this->result_ !== null) {
      $xfer += $output->writeFieldBegin('result_', TType::I32, 1);
      $xfer += $output->writeI32($this->result_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->selected_columns_ !== null) {
      $xfer += $output->writeFieldBegin('selected_columns_', TType::STRING, 2);
      $xfer += $output->writeString($this->selected_columns_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item_ !== null) {
      if (!is_object($this->item_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item_', TType::STRUCT, 3);
      $xfer += $this->item_->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryReadResp {
  static $_TSPEC;

  public $result_ = null;
  public $selected_columns_ = null;
  public $rows_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'selected_columns_',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'rows_',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Libs\Thrift\Packages\RowSingle',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result_'])) {
        $this->result_ = $vals['result_'];
      }
      if (isset($vals['selected_columns_'])) {
        $this->selected_columns_ = $vals['selected_columns_'];
      }
      if (isset($vals['rows_'])) {
        $this->rows_ = $vals['rows_'];
      }
    }
  }

  public function getName() {
    return 'QueryReadResp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->result_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->selected_columns_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->rows_ = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new RowSingle();
              $xfer += $elem26->read($input);
              $this->rows_ []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryReadResp');
    if ($this->result_ !== null) {
      $xfer += $output->writeFieldBegin('result_', TType::I32, 1);
      $xfer += $output->writeI32($this->result_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->selected_columns_ !== null) {
      $xfer += $output->writeFieldBegin('selected_columns_', TType::STRING, 2);
      $xfer += $output->writeString($this->selected_columns_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rows_ !== null) {
      if (!is_array($this->rows_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rows_', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->rows_));
        {
          foreach ($this->rows_ as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MultiRowGetMultiResp {
  static $_TSPEC;

  public $result_ = null;
  public $selected_columns_ = null;
  public $items_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'selected_columns_',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'items_',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Libs\Thrift\Packages\MultiRowKeyValue',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result_'])) {
        $this->result_ = $vals['result_'];
      }
      if (isset($vals['selected_columns_'])) {
        $this->selected_columns_ = $vals['selected_columns_'];
      }
      if (isset($vals['items_'])) {
        $this->items_ = $vals['items_'];
      }
    }
  }

  public function getName() {
    return 'MultiRowGetMultiResp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->result_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->selected_columns_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->items_ = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new MultiRowKeyValue();
              $xfer += $elem33->read($input);
              $this->items_ []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MultiRowGetMultiResp');
    if ($this->result_ !== null) {
      $xfer += $output->writeFieldBegin('result_', TType::I32, 1);
      $xfer += $output->writeI32($this->result_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->selected_columns_ !== null) {
      $xfer += $output->writeFieldBegin('selected_columns_', TType::STRING, 2);
      $xfer += $output->writeString($this->selected_columns_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->items_ !== null) {
      if (!is_array($this->items_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items_', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items_));
        {
          foreach ($this->items_ as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchSqlResp {
  static $_TSPEC;

  public $result_ = null;
  public $rows_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'rows_',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Libs\Thrift\Packages\QueryReadResp',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result_'])) {
        $this->result_ = $vals['result_'];
      }
      if (isset($vals['rows_'])) {
        $this->rows_ = $vals['rows_'];
      }
    }
  }

  public function getName() {
    return 'BatchSqlResp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->result_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->rows_ = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new QueryReadResp();
              $xfer += $elem40->read($input);
              $this->rows_ []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchSqlResp');
    if ($this->result_ !== null) {
      $xfer += $output->writeFieldBegin('result_', TType::I32, 1);
      $xfer += $output->writeI32($this->result_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rows_ !== null) {
      if (!is_array($this->rows_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rows_', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->rows_));
        {
          foreach ($this->rows_ as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryWriteResp {
  static $_TSPEC;

  public $result_ = null;
  public $last_insert_id_ = null;
  public $affected_rows_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'last_insert_id_',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'affected_rows_',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result_'])) {
        $this->result_ = $vals['result_'];
      }
      if (isset($vals['last_insert_id_'])) {
        $this->last_insert_id_ = $vals['last_insert_id_'];
      }
      if (isset($vals['affected_rows_'])) {
        $this->affected_rows_ = $vals['affected_rows_'];
      }
    }
  }

  public function getName() {
    return 'QueryWriteResp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->result_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->last_insert_id_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->affected_rows_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryWriteResp');
    if ($this->result_ !== null) {
      $xfer += $output->writeFieldBegin('result_', TType::I32, 1);
      $xfer += $output->writeI32($this->result_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_insert_id_ !== null) {
      $xfer += $output->writeFieldBegin('last_insert_id_', TType::I64, 2);
      $xfer += $output->writeI64($this->last_insert_id_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->affected_rows_ !== null) {
      $xfer += $output->writeFieldBegin('affected_rows_', TType::I32, 3);
      $xfer += $output->writeI32($this->affected_rows_);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryConditions {
  static $_TSPEC;

  public $order_by_ = null;
  public $order_dir_ = null;
  public $start_ = null;
  public $limit_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_by_',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'order_dir_',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'start_',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'limit_',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['order_by_'])) {
        $this->order_by_ = $vals['order_by_'];
      }
      if (isset($vals['order_dir_'])) {
        $this->order_dir_ = $vals['order_dir_'];
      }
      if (isset($vals['start_'])) {
        $this->start_ = $vals['start_'];
      }
      if (isset($vals['limit_'])) {
        $this->limit_ = $vals['limit_'];
      }
    }
  }

  public function getName() {
    return 'QueryConditions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order_by_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->order_dir_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryConditions');
    if ($this->order_by_ !== null) {
      $xfer += $output->writeFieldBegin('order_by_', TType::STRING, 1);
      $xfer += $output->writeString($this->order_by_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_dir_ !== null) {
      $xfer += $output->writeFieldBegin('order_dir_', TType::I16, 2);
      $xfer += $output->writeI16($this->order_dir_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_ !== null) {
      $xfer += $output->writeFieldBegin('start_', TType::I32, 3);
      $xfer += $output->writeI32($this->start_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit_ !== null) {
      $xfer += $output->writeFieldBegin('limit_', TType::I32, 4);
      $xfer += $output->writeI32($this->limit_);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}
