<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

namespace Libs\Thrift\Packages;

use \Libs\Thrift\TType;

$GLOBALS['E_AnyValType'] = array(
  'UNKNOWN' => 0,
  'BYTE' => 1,
  'I16' => 2,
  'I32' => 3,
  'I64' => 4,
  'DOUBLE' => 5,
  'STRING' => 6,
  'BINARY' => 7,
);

final class AnyValType {
  const UNKNOWN = 0;
  const BYTE = 1;
  const I16 = 2;
  const I32 = 3;
  const I64 = 4;
  const DOUBLE = 5;
  const STRING = 6;
  const BINARY = 7;
  static public $__names = array(
    0 => 'UNKNOWN',
    1 => 'BYTE',
    2 => 'I16',
    3 => 'I32',
    4 => 'I64',
    5 => 'DOUBLE',
    6 => 'STRING',
    7 => 'BINARY',
  );
}

class AnyVal {

  static $_TSPEC;
  public $type_ = AnyValType::UNKNOWN;
  public $byte_val_ = null;
  public $i16_val_ = null;
  public $i32_val_ = null;
  public $i64_val_ = null;
  public $double_val_ = null;
  public $str_val_ = null;
  public $binary_val_ = null;

  public function __construct($vals=null) {
      if (!isset(self::$_TSPEC)) {
       self::$_TSPEC = array(
        1 => array(
          'var' => 'type_',
          'type' => TType::BYTE,
          ),
        2 => array(
          'var' => 'byte_val_',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'i16_val_',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'i32_val_',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'i64_val_',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'double_val_',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'str_val_',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'binary_val_',
          'type' => TType::STRING,
          ),
        );

    }
    if (is_array($vals)) {
      if (!isset($vals['type_'])) {
          $this->type_ = AnyValType::UNKNOWN;
      }
      $this->type_ = $vals['type_'];
      switch($this->type_){
      case AnyValType::BYTE:
         if (isset($vals['byte_val_'])) {
            $this->byte_val_ = $vals['byte_val_'];
         }
         else {
            $this->byte_val_ = 0;
         }
         break;
     case AnyValType::I16:
         if (isset($vals['i16_val_'])) {
            $this->i16_val_ = $vals['i16_val_'];
         }
         else {
            $this->i16_val_ = 0;
         }
        break;
     case AnyValType::I32:
        if (isset($vals['i32_val_'])) {
          $this->i32_val_ = $vals['i32_val_'];
        }
        else {
          $this->i32_val_ = $vals['i32_val_'];
        }
        break;
    case AnyValType::I64:
      if (isset($vals['i64_val_'])) {
        $this->i64_val_ = $vals['i64_val_'];
      }
      else {
        $this->i64_val_ = 0;
      }
      break;
    case AnyValType::DOUBLE:
      if (isset($vals['double_val_'])) {
        $this->double_val_ = $vals['double_val_'];
      }
      else {
        $this->double_val_ = 0.0;
      }
      break;
     case AnyValType::STRING:
      if (isset($vals['str_val_'])) {
        $this->str_val_ = $vals['str_val_'];
      }
      else {
        $this->str_val_ = '';
      }
      break;
      case AnyValType::BINARY:
      if (isset($vals['binary_val_'])) {
        $this->binary_val_ = $vals['binary_val_'];
      }
      else {
        $this->binary_val_ = '';
      }
      break;
    }
    }
  }
  public function GetValue() {
      switch($this->type_){
      case AnyValType::BYTE:
          return $this->byte_val_;
          break;
      case AnyValType::I16:
          return $this->i16_val_;
          break;
      case AnyValType::I32:
          return $this->i32_val_;
          break;
      case AnyValType::I64:
          return $this->i64_val_;
          break;
      case AnyValType::DOUBLE:
          return $this->double_val_;
          break;
      case AnyValType::STRING:
          return $this->str_val_;
          break;
      case AnyValType::BINARY:
          return $this->binary_val_;
          break;
      default:
          return NULL;
          break;
      }
  }

  public function GetStringValue() {
      switch($this->type_){
      case AnyValType::BYTE:
          return "" . $this->byte_val_;
          break;
      case AnyValType::I16:
          return "" . $this->i16_val_;
          break;
      case AnyValType::I32:
          return "" . $this->i32_val_;
          break;
      case AnyValType::I64:
          return "" . $this->i64_val_;
          break;
      case AnyValType::DOUBLE:
          return "" . $this->double_val_;
          break;
      case AnyValType::STRING:
          return $this->str_val_;
          break;
      case AnyValType::BINARY:
          return $this->binary_val_;
          break;
      default:
          return NULL;
          break;
      }
  }

  public function Clear() {
      switch($this->type_){
      case AnyValType::BYTE:
          unset($this->byte_val_);
          break;
      case AnyValType::I16:
          unset($this->i16_val_);
          break;
      case AnyValType::I32:
          unset($this->i32_val_);
          break;
      case AnyValType::I64:
          unset($this->i64_val_);
          break;
      case AnyValType::DOUBLE:
          unset($this->double_val_);
          break;
      case AnyValType::STRING:
          unset($this->str_val_);
          break;
      case AnyValType::BINARY:
          unset($this->binary_val_);
          break;
      default:
          break;
      }
  }
  public function SetByte($val){
      $this->Clear();
      $this->type_ = AnyValType::BYTE;
      $this->byte_val_ = $val;
  }
  public function SetI16($val){
      $this->Clear();
      $this->type_ = AnyValType::I16;
      $this->i16_val_ = $val;
  }
  public function SetI32($val){
      $this->Clear();
      $this->type_ = AnyValType::I32;
      $this->i32_val_ = $val;
  }
  public function SetI64($val){
      $this->Clear();
      $this->type_ = AnyValType::I64;
      $this->i64_val_ = $val;
  }
  public function SetDouble($val){
      $this->Clear();
      $this->type_ = AnyValType::DOUBLE;
      $this->double_val_ = $val;
  }
  public function SetString($val){
      $this->Clear();
      $this->type_ = AnyValType::STRING;
      $this->str_val_ = $val;
  }
  public function SetBinary($val){
      $this->Clear();
      $this->type_ = AnyValType::BINARY;
      $this->binary_val_ = $val;
  }

  public function ChangeToType($type){
      $this->Clear();
      $this->type_ = $type;
      switch($type) {
      case AnyValType::UNKNOWN:
          break;
      case AnyValType::BYTE:
          $this->byte_val_ = 0;
          break;
      case AnyValType::I16:
          $this->i16_val_ = 0;
          break;
      case AnyValType::I32:
          $this->i32_val_ = 0;
          break;
      case AnyValType::I64:
          $this->i64_val_ = 0;
          break;
      case AnyValType::DOUBLE:
          $this->double_val_ = 0.0;
          break;
      case AnyValType::STRING:
          $this->str_val_ = "";
          break;
      case AnyValType::BINARY:
          $this->val_ = "";
          break;
      default:
          break;
      }
  }

  public function getName() {
    return 'AnyVal';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);

    $xfer += $input->readFieldBegin($fname, $ftype, $fid);
    if ($ftype == TType::STOP) {
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    if ($fid == 1 && $ftype == TType::BYTE) {
      $type = AnyValType::UNKNOWN;
      $xfer += $input->readByte($type);
      $this->ChangeToType($type);
    } else {
      $xfer += $input->skip($ftype);
    }

    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::BYTE && $this->type_ == AnyValType::BYTE) {
            $xfer += $input->readByte($this->byte_val_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16 && $this->type_ == AnyValType::I16) {
            $xfer += $input->readI16($this->i16_val_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32 && $this->type_ == AnyValType::I32) {
            $xfer += $input->readI32($this->i32_val_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64 && $this->type_ == AnyValType::I64) {
            $xfer += $input->readI64($this->i64_val_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE && $this->type_ == AnyValType::DOUBLE) {
            $xfer += $input->readDouble($this->double_val_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING && $this->type_ == AnyValType::STRING) {
            $xfer += $input->readString($this->str_val_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING && $this->type_ == AnyValType::BINARY) {
            $xfer += $input->readString($this->binary_val_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AnyVal');
    $xfer += $output->writeFieldBegin('type_', TType::BYTE, 1);
    $xfer += $output->writeByte($this->type_);
    $xfer += $output->writeFieldEnd();

    switch($this->type_){
    case AnyValType::UNKNOWN:
        break;
    case AnyValType::BYTE:
      $xfer += $output->writeFieldBegin('byte_val_', TType::BYTE, 2);
      $xfer += $output->writeByte($this->byte_val_);
      $xfer += $output->writeFieldEnd();
      break;
     case AnyValType::I16:
      $xfer += $output->writeFieldBegin('i16_val_', TType::I16, 3);
      $xfer += $output->writeI16($this->i16_val_);
      $xfer += $output->writeFieldEnd();
      break;
  case AnyValType::I32:
      $xfer += $output->writeFieldBegin('i32_val_', TType::I32, 4);
      $xfer += $output->writeI32($this->i32_val_);
      $xfer += $output->writeFieldEnd();
      break;
  case AnyValType::I64:
      $xfer += $output->writeFieldBegin('i64_val_', TType::I64, 5);
      $xfer += $output->writeI64($this->i64_val_);
      $xfer += $output->writeFieldEnd();
      break;
  case AnyValType::DOUBLE:
      $xfer += $output->writeFieldBegin('double_val_', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->double_val_);
      $xfer += $output->writeFieldEnd();
      break;
  case AnyValType::STRING:
      $xfer += $output->writeFieldBegin('str_val_', TType::STRING, 7);
      $xfer += $output->writeString($this->str_val_);
      $xfer += $output->writeFieldEnd();
      break;
  case AnyValType::BINARY:
      $xfer += $output->writeFieldBegin('binary_val_', TType::STRING, 8);
      $xfer += $output->writeString($this->binary_val_);
      $xfer += $output->writeFieldEnd();
      break;
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}
