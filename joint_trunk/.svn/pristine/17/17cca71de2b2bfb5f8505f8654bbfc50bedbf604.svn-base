<?php

namespace Joint\Package\Shop;

use Libs\Util\ArrayUtilities;
use Joint\Package\Common\BaseMemcache;
use \Joint\Package\Common\VirusCurlTool;
use Frame\Speed\Exception\ParameterException;
use Joint\Package\Common\BasePackage;

/**
 * Class ShopInfo
 * @package Joint\Package\Shop
 * @author yongzhao
 * @date 2015-10-12
 */
defined('VIRUS_URL') || define("VIRUS_URL", 'http://virusdoota.meilishuo.com/');
defined('FOCUS_URL') || define("FOCUS_URL",'http://focus.mlservice.meilishuo.com/');
//defined('VIRUS_URL') || define("VIRUS_URL", 'http://virusdoota.sichongcheng.rdlab.meilishuo.com/');

class ShopInfo extends BasePackage {

    private static $instance = null;
    private static $expireTime = 259200;

    private function __construct() {}

    public static function getInstance() {
        if (is_null(self::$instance)) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * 商家后台站内信(非主站站内信)
     * @param $params
     * @return mixed
     * @throws \Frame\Speed\Exception\ParameterException
     */
    public function pushMsg($params){

        $url = VIRUS_URL . 'msgsys/push_msg';

        $ret = VirusCurlTool::getInstance()->post($url, $params);

        $ret = json_decode($ret, true);
        if($ret['error_code'] !== 0){
            throw new ParameterException("消息发送失败",10004);
        }
        return $ret['data'];
    }

    /**
     * @param array $params
     * @return bool
     */
    public function getFocusData($params = array()){
        if(empty($params['shop_id'])){
            return FALSE;
        }
        $url = FOCUS_URL . 'focus/getShopAllInfo';

        $data = VirusCurlTool::getInstance()->get($url,$params);
        $data = json_decode($data,true);
        //从接口时时的去读 ，如果读取不到，取混存数据
        $cacheKey = 'Joint:ShopInfo:getFocusData:';
        $cacheKey .= ArrayUtilities::genParamsCacheKey($params);
        //查询缓存
        if(empty($data)) {
            $data = BaseMemcache::instance()->get($cacheKey);
            if (!empty($data)) {
                $data = json_decode($data, true);
                return $data['data'];
            }
        }else{
            //生成缓存
            BaseMemcache::instance()->set($cacheKey, json_encode($data), self::$expireTime);
            return $data['data'];
        }

        return FALSE;
    }

}