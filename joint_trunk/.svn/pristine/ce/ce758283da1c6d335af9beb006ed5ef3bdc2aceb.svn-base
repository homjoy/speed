<?php

namespace Joint\Package\Order;

use Libs\Util\ArrayUtilities;
use Joint\Package\Common\BaseMemcache;
use \Joint\Package\Common\VirusCurlTool;

defined('VIRUS_URL') || define("VIRUS_URL", 'http://virusdoota.meilishuo.com/');
//defined('VIRUS_URL') || define("VIRUS_URL", 'http://virusdoota.sichongcheng.rdlab.meilishuo.com/');

/**
 * Class OrderInfo
 * @package Joint\Package\Order
 * @author yongzhao
 * @desc 订单基本信息相关
 */
class OrderInfo extends \Joint\Package\Common\BasePackage {

    private static $instance = null;
    private static $expireTime = 259200;

    private function __construct() {}

    public static function getInstance() {
        if (is_null(self::$instance)) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * @param array $params
     * @return bool
     */
    public function getOrderInfo($params = array()) {
        if (empty($params['order_id'])) {
            return FALSE;
        }

        $url_pay = VIRUS_URL . 'order/order_service_info';

        $orderInfo = VirusCurlTool::getInstance()->get($url_pay,$params);
        $orderInfo = json_decode($orderInfo,true);
        //从接口时时的去读 ，如果读取不到，取混存数据
        $cacheKey = 'Joint:OrderInfo:getOrderInfo:';
        $cacheKey .= ArrayUtilities::genParamsCacheKey($params);
        //查询缓存
        if(empty($orderInfo)) {
            $orderInfo = BaseMemcache::instance()->get($cacheKey);
            if (!empty($orderInfo)) {
                $orderInfo = json_decode($orderInfo, true);
                return $orderInfo['data'];
            }
        }else{
            //生成缓存
            BaseMemcache::instance()->set($cacheKey, json_encode($orderInfo), self::$expireTime);
            return $orderInfo['data'];
        }

        return FALSE;
    }

    /**
     * @param array $params
     * @return bool
     */
    public function addRemarks($params = array()){
        if(empty($params['order_id']) || empty($params['comment'])){
            return FALSE;
        }
        $params['token'] = "4b99ac82830933d95aece3b4f5e47bbf";
        $url = VIRUS_URL . 'order/remarks_add';
        $result = VirusCurlTool::getInstance()->post($url,$params);
        if(!empty($result)){
            $result_arr = json_decode($result, true);
            if(isset($result_arr['error_code']) && $result_arr['error_code'] == 0){
                return $result_arr['data'];
            }
        }
        return FALSE;

    }

    /**
     * @param array $params
     * @return bool
     * @desc 检测是否刷单
     */
    public function checkSpamOrders($params = array()){
        if(empty($params['order_ids'])){
            return FALSE;
        }
        $url = VIRUS_URL . 'risk/Check_spam_orders';
        $result = VirusCurlTool::getInstance()->post($url,$params);
        $result = json_decode($result, true);

        if($result['error_code'] == 0 && isset($result['data'])){
            return $result['data'];
        }
        return FALSE;
    }

    /**
     * @param array $params
     * @return bool
     * @desc 订单黑名单相关
     */
    public function orderStatus($params = array()){
        if(empty($params['type']) || empty($params['order_id'])){
            return FALSE;
        }
        $url = VIRUS_URL . 'spam/order_status';
        $result = VirusCurlTool::getInstance()->post($url,$params);
        $result = json_decode($result, true);

        if($result['error_code'] == 0 && isset($result['data'])){
            return $result['data'];
        }
        return FALSE;
    }

    /**
     * @param array $params
     * @return bool
     * @desc 获取延期订单的记录
     */
    public function order_extend_recv_log($params = array()){
        if(empty($params['orderId'])){
            return FALSE;
        }
        $url = VIRUS_URL . 'order/order_extend_recv_log';
        $result = VirusCurlTool::getInstance()->post($url,$params);
        $result = json_decode($result, true);

        //从接口时时的去读 ，如果读取不到，取混存数据
        $cacheKey = 'Joint:OrderInfo:order_extend_recv_log:';
        $cacheKey .= ArrayUtilities::genParamsCacheKey($params);
        //查询缓存
        if(empty($result)) {
            $result = BaseMemcache::instance()->get($cacheKey);
            if (!empty($result)) {
                $result = json_decode($result, true);
                return $result['data'];
            }
        }else{
            //生成缓存
            BaseMemcache::instance()->set($cacheKey, json_encode($result), self::$expireTime);
            return $result['data'];
        }
        return FALSE;
    }
}
