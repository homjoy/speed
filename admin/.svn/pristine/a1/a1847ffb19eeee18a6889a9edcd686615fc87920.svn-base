<?php
namespace Admin\Modules\Structure\User;

use Libs\Util\Format;
use Admin\Modules\Common\BaseModule;
use Admin\Package\Common\Response;
use Admin\Package\Account\UserInfo;
use Admin\Package\Account\PersonalInfo;
/**
 * 一键注册
 * @author hongzhou@meilishuo.com
 * @since 2015-8-10 下午12:53:13
 */
class AjaxGetAllAuth extends BaseModule {
    private $params = array();
    protected $errors = array();
    public static $TYPE_VPN = 1;
    public static $TYPE_REDMINE = 2;
    public static $TYPE_SVN = 3;
    public static $TYPE_OSYS = 4;
    public static $TYPE_MAIL_PWD = 5; //邮箱密码修改登记
    public static $TYPE_WIFI = 6; //邮箱密码修改登记
    public static $VIEW_SWITCH_JSON = TRUE;
    private $status =1;
    protected $token = '747e8e9223dee90fb480685ded958713';

    public function run() {
        $this->_init();
        //校验前台传过字段
        if($this->post()->hasError()){
            $return = Response::gen_error(10001, '', $this->post()->getErrors());
            return $this->app->response->setBody($return);
        }
        $create_vpn=$create_red=$create_mail =$create_wifi=$create_svn=$create_com =TRUE;
        $user_mail= $ret =$time =$is_mail= $msg =array();
        //当前用户
        if(!isset($this->user['id'])){
            return $this->app->response->setBody(Response::gen_error(10002, '登录失败'));
        }
        //检验后台必须存有字段
        $ret  =$this->getUser(array('user_id'=>$this->params['user_id']));
        if(empty($ret['mail'])|| empty($ret['mobile'])||empty($ret['name_cn']) || empty($ret['depart_id'])){
            return $this->app->response->setBody(Response::gen_error(10003, '用户手机号、邮箱和部门必须保存哦'));
        }
        //构造创建所需字段
        $is_mail = preg_match('/@/', $ret['mail']);
        if (!$is_mail) { // 邮箱
            $is_mail =  $ret['mail'];
            $is_mail .='@meilishuo.com';
        }else{
            $is_mail = $ret['mail'];
        }
        $time = @date('Y-m-d H:i:s',time());
        $user_mail = UserInfo::getInstance()->getUserInfo( array('user_id'=>$this->user['id']));

        $user_mail = is_array($user_mail)?array_pop($user_mail):'';
        $user_mail = isset($user_mail['mail'])?$user_mail['mail']:'';

        $msg ='您的全部账号名为'.$ret['mail'].',';
        //computer
        if($this->params['computer_status']==1){
            $msg.='电脑初始密码:gaimima ';
            $create_com =FALSE;
        }
        //mail
        if($this->params['mail_status']==1){//5
            $result =$this->getItserverInfo(array('user_id'=>$this->params['user_id'],'account_type'=>self::$TYPE_MAIL_PWD));
           // 无
            if(!$result){
                $create= $this->createMailInfo(array('email'=>$is_mail,'depart_id'=> $ret['depart_id'],'truename'=>$ret['name_cn']));
                if(empty($create)){
                    return $this->app->response->setBody(Response::gen_error(50003, '创建mail失败,通知运维管理员处理'));
                }elseif(isset($create['code'])){
                    return $this->app->response->setBody(Response::gen_error(70001, '创建mail失败,账号已被注册请重新选取'));
                }
                $create_mail =$this->createItserverInfo(array('user_id'=>$this->params['user_id'],'account_type'=>self::$TYPE_MAIL_PWD,'login_name'=>$is_mail,'status'=>$this->status));
                $msg .='mail密码:'.$create['passwd'].' ';
           }
        }
       //vpn
        if($this->params['vpn_status']==1){//1
            //搜索
            $result =$this->getItserverInfo(array('user_id'=>$this->params['user_id'],'account_type'=>self::$TYPE_VPN));
            //无
            if(!$result){
                $create= $this->createVpnInfo(array('mail'=>$is_mail,'user_mail'=>$user_mail));

                if(empty($create)){
                    if($msg){
                        $sms=array();
                        $sms['content']=array('mail'=>$ret['mail'],'msg'=>$msg);
                        $sms['mobile'] =$ret['mobile'];
                        $sms['mail'] =$ret['mail'];
                        $this->sendSms($sms);
                    }
                    return $this->app->response->setBody(Response::gen_error(50003, '创建vpn失败,通知运维管理员处理'));
                }
                $create_vpn =$this->createItserverInfo(array('user_id'=>$this->params['user_id'],'account_type'=>self::$TYPE_VPN,'login_name'=>$is_mail,'status'=>$this->status,'update_time'=>$time));
                $msg .='VPN密码:'.$create['pwd'].' ';
            }
            //有不处理为了兼容多次注册情况
        }
        //wifi
        if($this->params['wifi_status']==1){
            $result =$this->getItserverInfo(array('user_id'=>$this->params['user_id'],'account_type'=>self::$TYPE_WIFI));
            if(!$result){
                $create= $this->createWifiInfo(array('mail'=>$is_mail,'user_mail'=>$user_mail));
                if(empty($create)){
                    if($msg){
                        $sms=array();
                        $sms['content']=array('mail'=>$ret['mail'],'msg'=>$msg);
                        $sms['mobile'] =$ret['mobile'];
                        $sms['mail'] =$ret['mail'];
                        $this->sendSms($sms);
                    }
                    return $this->app->response->setBody(Response::gen_error(50003, '创建wifi失败,通知运维管理员处理'));
                }
            $create_wifi=$this->createItserverInfo(array('user_id'=>$this->params['user_id'],'account_type'=>self::$TYPE_WIFI,'login_name'=>$is_mail,'status'=>$this->status,'update_time'=>$time));
            $msg .='Wifi密码:'.$create['pwd'].' ';
            }
        }
        //red svn
        if($this->params['redmine_status']==1){//2 3
            //搜索
            $result =$this->getItserverInfo(array('user_id'=>$this->params['user_id'],'account_type'=>self::$TYPE_REDMINE));
            $result_svn =$this->getItserverInfo(array('user_id'=>$this->params['user_id'],'account_type'=>self::$TYPE_SVN));
            //无
            if(empty($result)&& empty($result_svn)){
                $create= $this->createRedmineInfo(array('mail'=>$is_mail));
                if(empty($create)){
                    if($msg){
                        $sms=array();
                        $sms['content']=array('mail'=>$ret['mail'],'msg'=>$msg);
                        $sms['mobile'] =$ret['mobile'];
                        $sms['mail'] =$ret['mail'];
                        $this->sendSms($sms);
                    }
                    return $this->app->response->setBody(Response::gen_error(50003, '创建redmine/svn失败,通知运维管理员处理'));
                }
                $create_red =$this->createItserverInfo(array('user_id'=>$this->params['user_id'],'account_type'=>self::$TYPE_REDMINE,'login_name'=>$is_mail,'status'=>$this->status,'update_time'=>$time));
                $create_svn =$this->createItserverInfo(array('user_id'=>$this->params['user_id'],'account_type'=>self::$TYPE_SVN,'login_name'=>$is_mail,'status'=>$this->status,'update_time'=>$time));
                $msg .='Redmine和SVN密码:'.$create['pwd'].' ';
            }

        }
        //录入speed未成功
        if(empty($create_mail)|| empty($create_wifi)||empty($create_svn)|| empty($create_red)|| empty($create_vpn)){
            return $this->app->response->setBody(Response::gen_error(50001, '录入数据库失败,通知speed管理员处理'));
        }
        //没有创建选项
        if($create_com===TRUE&&$create_mail===TRUE&&$create_svn===TRUE&&$create_red===TRUE&&$create_vpn===TRUE&&$create_wifi===TRUE){
            return $this->app->response->setBody(Response::gen_error(30001, '没有申请数据或重复申请'));
        }
        //创建成功后短信通知
        $sms=array();
        $sms['content']=array('mail'=>$ret['mail'],'msg'=>$msg);
        $sms['mobile'] =$ret['mobile'];
        $sms['mail'] =$ret['mail'];
        $this->sendSms($sms);
        $this->app->response->setBody(Response::gen_success('注册成功'));
    }
    //发短信
    private function sendSms($param = array()) {
        if(!isset($param['content'])||empty($param['mobile'])|| !isset($param['mail'])) {
            return FALSE;
        }
        $date = date('Y-m-d H:i:s',time());
        $message['sms'] =$param['content'];
        $array_data= array(
            'token' => $this->token,
            'custom_id' => '1',
            'content' => $message,
            'to_id' => $this->user['id'], 'send_at' => $date, 'title' => '一键注册', 'template_id' => 124, 'channel' => 'sms', 'phone' =>$param['mobile'],'mail'=>$param['mail']);
        $return = $this->getClient()->call('worker','notification/push',$array_data);
        $return = $this->parseApiData($return);
        //记录日志TODO
        $array_data['return'] =$return;
        $this->app->log->log('admin/structure/user/ajax_get_all_auth', json_encode($array_data));

    }
    private function getItserverInfo($param) {//user_id  account_type
        $ret = self::getClient()->call('atom', 'core/get_mail_password_time', $param);
        $ret = $this->parseApiData($ret);
        return $ret;
    }
    private function createItserverInfo($param) {
        $ret = self::getClient()->call('atom', 'core/add_mail_password_time', $param);
        $ret = $this->parseApiData($ret);
        return $ret;
    }
    private function createVpnInfo($param) {
        $ret = self::getClient()->call('joint', 'itserver/grant_vpn_auth', $param);
        $ret = $this->parseApiData($ret);
        return $ret;
    }
    private function createWifiInfo($param) {
        $ret = self::getClient()->call('joint', 'itserver/grant_wifi_auth', $param);
        $ret = $this->parseApiData($ret);
        return $ret;
    }
    private function createRedmineInfo($param) {//user_id  account_type
        $ret = self::getClient()->call('joint', 'itserver/grant_redmine_auth', $param);
        $ret = $this->parseApiData($ret);
        return $ret;
    }
    private function createMailInfo($param) {//user_id  account_type
        $ret = self::getClient()->call('joint', 'itserver/email_create', $param);
        if(isset($ret['content']['code']) && $ret['content']['error_code']==70001){//单独处理
            return array('code'=>$ret['content']['error_code']);
        }
        $ret = $this->parseApiData($ret);
        return $ret;
    }
    private function getUser($param) {//user_id
        $ret =array();
        $ret_mail = UserInfo::getInstance()->getUserInfo( $param);;
        $ret_mail = is_array($ret_mail)?array_pop($ret_mail):'';
        $ret_mobile = PersonalInfo::getInstance()->getPersonalInfo($param);
        $ret_mobile = is_array($ret_mobile)?array_pop($ret_mobile):'';
        $ret['mail'] = isset($ret_mail['mail'])?$ret_mail['mail']:'';
        $ret['name_cn'] = isset($ret_mail['name_cn'])?$ret_mail['name_cn']:'';
        $ret['depart_id'] = isset($ret_mail['depart_id'])?$ret_mail['depart_id']:'';
        $ret['mobile'] = isset($ret_mobile['mobile'])?$ret_mobile['mobile']:'';
        return $ret;
    }


    private function _init() {
        $this->rules = array(//user_info
            'user_id' => array(
                'required' => TRUE,
                'allowEmpty' => FALSE,
                'type'=>'integer',

            ),
            'vpn_status' => array(//1
                'type'=>'integer',
                'enum'=>array(0,1),
            ),
            'wifi_status' => array(
                'type'=>'integer',
                'enum'=>array(0,1),
            ),
            'redmine_status' => array(//2 3
                'type'=>'integer',
                'enum'=>array(0,1),
            ),
            'mail_status' => array(//5
                'type'=>'integer',
                'enum'=>array(0,1),
            ),
            'computer_status' => array(//电脑
                'type'=>'integer',
                'enum'=>array(0,1),
            ),

        );
        $this->params   = $this->post()->safe();
        $this->errors   = $this->post()->getErrors();
    }
}