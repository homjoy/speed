<?php
namespace Admin\Modules\Structure\User;
use Libs\Util\Format;
use Admin\Modules\Common\BaseModule;
use Admin\Package\Common\Response;
use Admin\Package\Log\Log;
/**
 * 修改邮箱密码
 * @author hongzhou@meilishuo.com
 * @since 2015-11-14 下午12:53:13
 */
class AjaxUpdateMailPwd extends BaseModule {

    protected $errors = NULL;
    private   $params = NULL;
    public static $VIEW_SWITCH_JSON = TRUE;
    const mail_string = '@meilishuo.com';
    const IT =8;

    public function run() {
        $this->_init();
        if($this->post()->hasError()){
            $return = Response::gen_error(10001, '', $this->post()->getErrors());
            return $this->app->response->setBody($return);
        }
        $is_mail = preg_match('/@/', $this->params['mail_name']);
        if (!$is_mail) { // 邮箱
            $this->params['mail_name'] .=self::mail_string;
        }
        $ret = $this->updateMailPwd($this->params);
        if(!$ret){
           return $this->app->response->setBody(Response::gen_error(50001,'修改失败'));
        }
        $this->doLog($this->params);
        $this->app->response->setBody(Response::gen_success('修改成功'));
    }

    protected function updateMailPwd($mail){
        $return_data=NULL;
        $return_data = $this->getClient()->call('joint', 'itserver/email_update', $mail);
        $return_data = $this->parseApiData($return_data);
        return $return_data;

    }
    protected function doLog($new_param=array(),$old_param='update'){
        $ret = Log::getInstance()->createLogs(array(
                'user_id'=>$this->user['id'],
                'handle_id'=>100000,
                'operation_type'=>$old_param,
                'after_data'=>json_encode($new_param),
                'handle_type'=>self::IT
            )
        );
        return $ret;
    }
    private function _init() {

        $this->rules  = array(
            'mail_pwd' => array(
                'type'=>'string',
                'required' => TRUE,
                'allowEmpty' => FALSE,
            ),
            'mail_name' => array(
               'type'=>'string',
                'required' => TRUE,
                'allowEmpty' => FALSE,
           )
        );

        $this->params   = $this->post()->safe();
        $this->errors   = $this->post()->getErrors();

    }
    
}