<?php
namespace Admin\Modules\Meeting;

use Admin\Modules\Common\BaseModule;
use Admin\Package\Common\Response;
use Admin\Package\Meeting\Book;
use Admin\Package\Company\Office;
use Admin\Package\Log\Log;
/**
 * AjaxMeetingCancel
 * Class
 *
 * @package Admin\Modules\Meeting
 */
class AjaxMeetingCancel extends BaseModule {

    protected $errors = NULL;
    private   $params = NULL;
    public static $MEET_TYPE= 7;
    public static $VIEW_SWITCH_JSON = TRUE;
    public function run() {

        $this->_init();
        $return =array();
        if( $this->query()->hasError()){
            $return = Response::gen_error(10001, '', $this->errors);
            return $this->app->response->setBody($return);
        }
        $meet_book_info = Book::getInstance()->getBooks( array('book_id'=>$this->params['book_id']));

        if(!$meet_book_info){
            $this->app->response->setBody(Response::gen_error(50001, "没有这个预定信息"));
            return false;
        }
        //将会议信息删除
        $stat = Book::getInstance()->deleteBook( array('book_id'=>$this->params['book_id']));
        if(!$stat){
            $this->app->response->setBody(Response::gen_error(50004, "会议取消失败"));
            return false;
        }
        $this->doLog($this->params,$meet_book_info);
        $this->app->response->setBody($return);
    }

    protected function doLog($new_param=array(),$old_param=array()){
        $old =$old_param;
        is_array($old)&&$old=array_pop($old);
        $old = json_encode($old);
        $new =$new_param;
        $new = json_encode($new);
        $ret = Log::getInstance()->createLogs(array('user_id'=>$this->user['id'],'handle_id'=>$new_param['order_id'],
            'before_data'=>$old,'after_data'=>$new,'handle_type'=>self::$MEET_TYPE));
        return $ret;
    }
    private function _init() {

        $this->rules = array(
            'book_id'  => array(
                'required'	=> true,
                'allowEmpty' => FALSE,
                'type'    => 'integer',
            )

        );
        $this->params = $this->query()->safe();
        $this->errors = $this->query()->getErrors();
    }


}